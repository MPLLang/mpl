=============================================================================
STATUS
=============================================================================

Intermediate goals:
  1. (DONE) migrate chunkList::rememberedSet to hierarchicalHeap
    - (DONE) change collection toSpace,fromSpace to arrays of heaps rather than array of chunklists
  2. (DONE) migrate chunkList::{representative,depth}
  3. flatten chunkList into container (store struct directly, don't indirect)

=============================================================================
GOAL
=============================================================================

The goal is to recreate the level-linked data structure for hierarchical heaps,
with various improvements along the way. Heaps will be organized into a
tree where intermediate empty levels are skipped. We will also link heaps into
a dynamic disjoint-set data structure instead of their constituent chunklist
objects.
  - unbounded fork depth
  - no cost (space or time!!) for unused empty levels
  - single-point-of-allocation for runtime metadata (the heap objects)

The data structure will look roughly like this:

  struct GC_heap {
    /* in the path-compressing query tree */
    struct GC_heap* representative;

    /* in the heap hierarchy. not necessarily immediate parent, as some levels
     * can be empty.*/
    struct GC_heap* nextAncestor;

    chunklist smallObjectsSpace;
    chunklist largeObjectsSpace;
    chunklist rememberedSet;

    int depth;
  }

  struct GC_thread {
    ...
    struct GC_heap* heap;
    int currentDepth;
  }

